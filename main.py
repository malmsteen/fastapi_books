from fastapi import FastAPI, HTTPException
import uvicorn
from pydantic import BaseModel

app = FastAPI()

books = [
    {'id':1,
    'title': "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Pyhton",
    'author': "–ú—ç—Ç—Ç—å—é"},
    {'id':2,
    'title': "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ python",
    'author': '–ñ–µ–Ω—è'}
]

@app.get('/')
def hw():
    return "Hello World!"

@app.get(
    '/books',
    tags=["–ö–Ω–∏–≥–∏ üò±"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—É")
def read_books():
    return books

@app.get(
    "/books/{book_id}",
    tags=["–ö–Ω–∏–≥–∏ üò±"],
    summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏")
def get_book(book_id: int):
    for book in books:
        if book['id'] == book_id:
            return book
    raise HTTPException(status_code=404, detail="Book not found")


class NewBook(BaseModel):
    title: str
    author: str


@app.post("/authors")
def create_book(new_book:NewBook):
    books.append({
        "id": len(books) + 1,
         "title": new_book.title,
         "author":new_book.author
    })
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}

if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)
